""" This sub-module provides 'sequence awareness' for blessings.
"""

import textwrap
import warnings
import math
import re

__author__ = 'Jeff Quast <contact@jeffquast.com>'
__license__ = 'MIT'

_BINTERM_UNSUPPORTED = ('kermit', 'avatar')


__all__ = ['init_sequence_patterns', 'Sequence', 'SequenceTextWrapper']


def init_sequence_patterns(term):
    """ Given a Terminal instance, ``term``, this function processes
        and parses several known terminal capabilities, and builds a
        database of regular expressions and attatches them to ``term``
        as attributes:
            ``_re_will_move``: any sequence matching this pattern will
              cause the terminal cursor to move (such as term.home).
            ``_re_wont_move``: any sequence matching this pattern will
              not cause the cursor to move (such as term.bold).
            ``_re_cuf``: regular expression that matches term.cuf(N)
              (move N characters forward).
            ``cuf1``: term.cuf1 sequence (cursor forward 1 character)
              as a static value.
            ``_re_cub``: regular expression that matches term.cub(N)
              (move N characters backward).
            ``cub1``: term.cuf1 sequence (cursor backward 1 character)
              as a static value.

        These attribtues make it possible to perform introspection on
        strings containing sequences generated by this terminal, to determine
        the printable length of a string.

        For debugging, complimentary lists of these sequence matching
        pattern values prior to compilation are attached as attributes
        ``_will_move``, ``_wont_move``, ``_cuf``,  ``_cub``.
    """

    if term in _BINTERM_UNSUPPORTED:
        warnings.warn('sequence-awareness for terminals emitting binary-packed'
                      'capabilities are not currently supported.')

    def merge_sequences(inp):
        """ Merge a list of input sequence patterns for use
            in a regular expression. Order by lengthyness (full
            sequence set precident over subset), and exclude
            any empty('') sequences. """
        return sorted(list(filter(None, inp)), key=len, reverse=True)

    def bnc(cap, optional=False, base_num=99, nparams=1):
        """ Build regexp from capabilities having matching numeric
            parameter contained within termcap value: n->(\d+).
        """
        _cap = getattr(term, cap)
        opt = '?' if optional else ''
        if _cap:
            cap_re = re.escape(_cap(*((base_num,) * nparams)))
            for num in range(base_num-1, base_num+2):
                # search for matching ascii, n-1 through n+2
                if str(num) in cap_re:
                    # modify & return n to matching digit expression
                    cap_re = cap_re.replace(str(num), r'(\d+)%s' % (opt,))
                    return cap_re
            assert False, ('Unknown parameter in %r, %r' % (cap, cap_re))
        return None  # no such capability

    def bna(cap, num=99, nparams=1):
        """ Build regexp from capabilities having *any* digit parameters
            (substitute matching \d with pattern \d and return).
        """
        _cap = getattr(term, cap)
        if _cap:
            cap_re = re.escape(_cap(*((num,) * nparams)))
            cap_re = re.sub('(\d+)', r'(\d+)', cap_re)
            if r'(\d+)' in cap_re:
                return cap_re
            assert False, ('Could not discover numeric capability '
                           'in %r, %r' % (cap, cap_re,))
        return None  # no such capability

    # Build will_move, a list of terminal capabilities that have
    # indeterminate effects on the terminal cursor position.
    will_move_seqs = set([
        # carriage_return
        re.escape(term.cr),
        # column_address: Horizontal position, absolute
        bnc('hpa'),
        # row_address: Vertical position #1 absolute
        bnc('vpa'),
        # cursor_address: Move to row #1 columns #2
        bnc('cup', nparams=2),
        # cursor_down: Down one line
        re.escape(term.cud1),
        # cursor_home: Home cursor (if no cup)
        re.escape(term.home),
        # cursor_left: Move left one space
        re.escape(term.cub1),
        # cursor_right: Non-destructive space (move right one space)
        re.escape(term.cuf1),
        # cursor_up: Up one line
        re.escape(term.cuu1),
        # param_down_cursor: Down #1 lines
        bnc('cud', optional=True),
        # restore_cursor: Restore cursor to position of last save_cursor
        re.escape(term.rc),
        # clear_screen: clear screen and home cursor
        re.escape(term.clear),
        # cursor_up: Up one line
        re.escape(term.enter_fullscreen),
        re.escape(term.exit_fullscreen),
        # forward cursor
        term._cuf,
        # backward cursor
        term._cub,
    ])

    # Build wont_move, a list of terminal capabilities that mainly affect
    # video attributes, for use with measure_length().
    wont_move_seqs = list([
        # print_screen: Print contents of screen
        re.escape(term.mc0),
        # prtr_off: Turn off printer
        re.escape(term.mc4),
        # prtr_on: Turn on printer
        re.escape(term.mc5),
        # save_cursor: Save current cursor position (P)
        re.escape(term.sc),
        # set_tab: Set a tab in every row, current columns
        re.escape(term.hts),
        # enter_bold_mode: Turn on bold (extra bright) mode
        re.escape(term.bold),
        # enter_underline_mode: Begin underline mode
        re.escape(term.underline),
        # enter_blink_mode: Turn on blinking
        re.escape(term.blink),
        # enter_dim_mode: Turn on half-bright mode
        re.escape(term.dim),
        # cursor_invisible: Make cursor invisible
        re.escape(term.civis),
        # cursor_visible: Make cursor very visible
        re.escape(term.cvvis),
        # cursor_normal: Make cursor appear normal (undo civis/cvvis)
        re.escape(term.cnorm),
        # clear_all_tabs: Clear all tab stops
        re.escape(term.tbc),
        # change_scroll_region: Change region to line #1 to line #2
        bnc('csr', nparams=2),
        # clr_bol: Clear to beginning of line
        re.escape(term.el1),
        # clr_eol: Clear to end of line
        re.escape(term.el),
        # clr_eos: Clear to end of screen
        re.escape(term.clear_eos),
        # delete_character: Delete character
        re.escape(term.dch1),
        # delete_line: Delete line (P*)
        re.escape(term.dl1),
        # erase_chars: Erase #1 characters
        bnc('ech'),
        # insert_line: Insert line (P*)
        re.escape(term.il1),
        # parm_dch: Delete #1 characters
        bnc('dch'),
        # parm_delete_line: Delete #1 lines
        bnc('dl'),
        # exit_alt_charset_mode: End alternate character set (P)
        re.escape(term.rmacs),
        # exit_am_mode: Turn off automatic margins
        re.escape(term.rmam),
        # exit_attribute_mode: Turn off all attributes
        re.escape(term.sgr0),
        # exit_ca_mode: Strings to end programs using cup
        re.escape(term.rmcup),
        # exit_insert_mode: Exit insert mode
        re.escape(term.rmir),
        # exit_standout_mode: Exit standout mode
        re.escape(term.rmso),
        # exit_underline_mode: Exit underline mode
        re.escape(term.rmul),
        # flash_hook: Flash switch hook
        re.escape(term.hook),
        # flash_screen: Visible bell (may not move cursor)
        re.escape(term.flash),
        # keypad_local: Leave 'keyboard_transmit' mode
        re.escape(term.rmkx),
        # keypad_xmit: Enter 'keyboard_transmit' mode
        re.escape(term.smkx),
        # meta_off: Turn off meta mode
        re.escape(term.rmm),
        # meta_on: Turn on meta mode (8th-bit on)
        re.escape(term.smm),
        # orig_pair: Set default pair to its original value
        re.escape(term.op),
        # parm_ich: Insert #1 characters
        bnc('ich'),
        # parm_index: Scroll forward #1
        bnc('indn'),
        # parm_insert_line: Insert #1 lines
        bnc('il'),
        # erase_chars: Erase #1 characters
        bnc('ech'),
        # parm_rindex: Scroll back #1 lines
        bnc('rin'),
        # parm_up_cursor: Up #1 lines
        bnc('cuu'),
        # scroll_forward: Scroll text up (P)
        re.escape(term.ind),
        # scroll_reverse: Scroll text down (P)
        re.escape(term.rev),
        # tab: Tab to next 8-space hardware tab stop
        re.escape(term.ht),
        # set_a_background: Set background color to #1, using ANSI escape
        bna('setab', num=1),
        bna('setab', num=(term.number_of_colors - 1)),
        # set_a_foreground: Set foreground color to #1, using ANSI escape
        bna('setaf', num=1),
        bna('setaf', num=(term.number_of_colors - 1)),
    ] + [
        # set_attributes: Define video attributes #1-#9 (PG9)
        # ( not *exactly* legal, being extra forgiving. )
        bna('sgr', nparams=_num) for _num in range(1, 10)
        # reset_{1,2,3}string: Reset string
    ] + map(re.escape, (term.r1, term.r2, term.r3,)))

    # store pre-compiled list as '_will_move' and '_wont_move', for debugging
    term._will_move = merge_sequences(will_move_seqs)
    term._wont_move = merge_sequences(wont_move_seqs)

    # compile as regular expressions, OR'd.
    term._re_will_move = re.compile('(%s)' % ('|'.join(term._will_move)))
    term._re_wont_move = re.compile('(%s)' % ('|'.join(term._wont_move)))

    # static pattern matching for _horiontal_distance
    #
    # parm_right_cursor: Move #1 characters to the right
    term._cuf = bnc('cuf', optional=True)
    term._re_cuf = re.compile(term._cuf) if term._cuf else None
    # cursor_right: Non-destructive space (move right one space)
    term._cuf1 = term.cuf1
    # parm_left_cursor: Move #1 characters to the left
    term._cub = bnc('cub', optional=True)
    term._re_cub = re.compile(term._cub) if term._cub else None
    # cursor_left: Move left one space
    term._cub1 = term.cub1


class SequenceTextWrapper(textwrap.TextWrapper):
    def __init__(self, width, term, **kwargs):
        self.term = term
        assert kwargs.get('break_long_words', False) is False, (
            'break_long_words is not sequence-safe')
        kwargs['break_long_words'] = False
        textwrap.TextWrapper.__init__(self, width, **kwargs)

    def _wrap_chunks(self, chunks):
        """
        escape-sequence aware varient of _wrap_chunks. Though
        movement sequences, such as term.left() are certainly not
        honored, sequences such as term.bold() are, and are not
        broken mid-sequence.
        """
        lines = []
        if self.width <= 0 or not isinstance(self.width, int):
            raise ValueError("invalid width %r(%s) (must be integer > 0)" % (
                self.width, type(self.width)))
        chunks.reverse()
        while chunks:
            cur_line = []
            cur_len = 0
            if lines:
                indent = self.subsequent_indent
            else:
                indent = self.initial_indent
            width = self.width - len(indent)
            if (not hasattr(self, 'drop_whitespace')
                or self.drop_whitespace) and (
                    chunks[-1].strip() == '' and lines):
                del chunks[-1]
            while chunks:
                chunk_len = Sequence(chunks[-1], self.term).length()
                if cur_len + chunk_len <= width:
                    cur_line.append(chunks.pop())
                    cur_len += chunk_len
                else:
                    break
            if chunks and Sequence(chunks[-1], self.term).length() > width:
                self._handle_long_word(chunks, cur_line, cur_len, width)
            if (not hasattr(self, 'drop_whitespace')
                or self.drop_whitespace) and (
                    cur_line and cur_line[-1].strip() == ''):
                del cur_line[-1]
            if cur_line:
                lines.append(indent + u''.join(cur_line))
        return lines


class Sequence(unicode):
    """
    This unicode-derived class understands the effect of escape sequences
    of printable length, allowing a properly implemented .rjust(), .ljust(),
    .center(), and .len()
    """

    def __new__(cls, sequence_text, term):
        new = unicode.__new__(cls, sequence_text)
        new._term = term
        return new

    def ljust(self, width, fillchar=u' '):
        return self + fillchar * (max(0, width - self.length()))

    def rjust(self, width, fillchar=u' '):
        return fillchar * (max(0, width - self.length())) + self

    def center(self, width, fillchar=u' '):
        split = max(0.0, float(width) - self.length()) / 2
        return (fillchar * (max(0, int(math.floor(split)))) + self
                + fillchar * (max(0, int(math.ceil(split)))))

    def length(self):
        """  S.length() -> integer

        Return the printable length of a string that contains (some types) of
        (escape) sequences. Although accounted for, strings containing
        sequences such as 'clear' will not give accurate returns, it is
        considered un-lengthy (length of 0).
        """
        # nxt: points to first character beyond current escape sequence.
        # width: currently estimated display length.
        nxt = width = 0
        for idx in range(0, unicode.__len__(self)):
            # account for width of sequences that contain padding (a sort of
            # SGR-equivalent cheat for the python equivalent of ' '*N, for
            # very large values of N that may xmit fewer bytes than many raw
            # spaces. It should be noted, however, that this is a
            # non-destructive space.
            width += horizontal_distance(self[idx:], self._term)
            if idx == nxt:
                # point beyond this sequence
                nxt = idx + measure_length(self[idx:], self._term)
            if nxt <= idx:
                # TODO:
                # 'East Asian Fullwidth' and 'East Asian Wide' characters
                # can take 2 cells, see http://www.unicode.org/reports/tr11/
                # and http://www.gossamer-threads.com/lists/python/bugs/972834
                width += 1
                # point beyond next sequence, if any, otherwise next character
                nxt = idx + measure_length(self[idx:], self._term) + 1
        return width


def measure_length(ucs, term):
    """
    measure_length(S) -> integer

    Returns non-zero for string ``S`` that begins with a terminal sequence,
    that is: the width of the first unprintable sequence found in S.  For use
    as a *next* pointer to skip past sequences. If string ``S`` is not a
    sequence, 0 is returned.

    A sequence may be a typical terminal sequence beginning with Escape (\x1f),
    especially a Control Sequence Initiator ("CSI", '\x1f[' ... ), or those of
    '\a', '\b', '\r', '\n', '\xe0' (shift in), '\x0f' (shift out). They do not
    necessarily have to begin with CSI, they need only match the capabilities
    of attributes ``_re_will_move`` and ``_re_wont_move`` of terminal ``term``.
    """
    # simple terminal control characters,
    ctrl_seqs = u'\a\b\r\n\x0e\x0f'
    if any([ucs.startswith(_ch) for _ch in ctrl_seqs]):
        return 1
    # known multibyte sequences,
    matching_seq = term and (
        term._re_will_move.match(ucs) or
        term._re_wont_move.match(ucs) or
        term._re_cub and term._re_cub.match(ucs) or
        term._re_cuf and term._re_cuf.match(ucs)
    )
    if matching_seq:
        start, end = matching_seq.span()
        return end
    # none found, must be printable!
    return 0


def horizontal_distance(ucs, term):
    """ horizontal_distance(S) -> integer

    Returns Integer <n> in SGR sequence of form <ESC>[<n>C (T.move_right(nn)).
    Returns Integer -(n) in SGR sequence of form <ESC>[<n>D (T.move_left(nn)).
    Returns -1 for backspace (0x08), Otherwise 0.

    Tabstop (\t) cannot be correctly calculated, as the relative column
    position cannot be determined: 8 is always (and, incorrectly) returned.
    """

    def term_distance(cap, unit):
        """ Match by simple cub1/cuf1 string matching (distance of 1)
            Or, by regular expression (using dynamic regular expressions
            built using cub(n) and cuf(n). Failing that, the standard
            SGR sequences (\033[C, \033[D, \033[nC, \033[nD
        """
        assert cap in ('cuf', 'cub')
        # match cub1(left), cuf1(right)
        one = getattr(term, '_%s1' % (cap,))
        if one and ucs.startswith(one):
            return unit

        # match cub(n), cuf(n) using regular expressions
        re_pattern = getattr(term, '_re_%s' % (cap,))
        _dist = re_pattern and re_pattern.match(ucs)
        if _dist:
            return unit * int(_dist.group(1))

    if ucs.startswith('\b'):
        return -1

    elif ucs.startswith('\t'):
        # as best as I can prove it, a tabstop is always 8 by default.
        # Though, given that blessings is:
        #  1. unaware of the output device's current cursor position, and
        #  2. unaware of the location the callee may chose to output any
        #     given string,
        # It is not possible to determine how many cells any particular
        # \t would consume on the output device!
        return 8

    return term_distance('cub', -1) or term_distance('cuf', 1) or 0
